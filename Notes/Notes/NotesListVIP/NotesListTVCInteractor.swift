//
//  NotesListTVCInteractor.swift
//  Notes
//
//  Created by Rivi Elf on 28/12/2019.
//  Copyright (c) 2019 Rivi Elf. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NotesListTVCBusinessLogic
{
  var useCase: UseCase {get set}
  func ViewWillApearRequest()
  func viewDidLoadRequest()
  func delete(_ object: Note)
  func changeStateRequest()
  func insertNewObjectPresed()
  func didSelect(_ object:Note)
    
}

protocol NotesListDataStore
{
    var selectedNote: Note?  { get }
    var worker: LocalStrageWorker! { get }
}

enum UseCase: Int16 {
    case regular = 0, recycled = 1
}


class NotesListTVCInteractor: NotesListTVCBusinessLogic, NotesListDataStore
{
    
    
   
  var presenter: NotesListTVCPresentationLogic!
  var worker: LocalStrageWorker!
  var useCase: UseCase = .regular
  var selectedNote: Note?
    
    var title: String {
        switch useCase {
        case .recycled:
            return "Recyceld Been"
        case .regular:
            return "My Notes"
        }
    }
    
    init() {
        self.worker = LocalStrageWorker()
    }
  
  // MARK: Do something
    
    func viewDidLoadRequest() {
        let notes = worker.fetchNotes(self.useCase)
        let reponse = ListResponse(notes: notes, title: title, useCase: useCase)
        presenter?.viewDidLoad(response: reponse)
    }
    
    func ViewWillApearRequest(){
        let notes = worker.fetchNotes(self.useCase)
        let reponse = ListResponse(notes: notes, title: title, useCase: useCase)
        presenter.reloadTable(response: reponse)
    }
    
    func delete(_ object: Note) {
        worker.deleteNote(useCase: self.useCase, noteId: object.id)
        ViewWillApearRequest()
    }
  
    
    func changeStateRequest(){
       switch useCase {
        case .recycled:
            self.useCase = .regular
        case .regular:
            self.useCase = .recycled
        }
        
        viewDidLoadRequest()
    }
    
    func recyclePressed() {
        self.useCase = .recycled
        self.viewDidLoadRequest()
    }
    
    func insertNewObjectPresed() {
        self.selectedNote = Note(id: UUID().uuidString, type: self.useCase)
        presenter.displayNextScreen()
           
    }
       
    func didSelect(_ object: Note) {
        self.selectedNote = object
        presenter.displayNextScreen()
        
    }
  
 
}
